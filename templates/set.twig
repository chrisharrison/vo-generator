use InvalidArgumentException;
use ChrisHarrison\VoGenerator\EntitySet;
use ChrisHarrison\VoGenerator\ValueObject;
use ChrisHarrison\VoGenerator\HookComposition;

class {{ name }} implements {{ implements|implements }}
{
{% for trait in traits %}
    use \{{ trait }};
{%  endfor %}
    use HookComposition;

    private $set;

    protected function __construct(array $set)
    {
        $this->composeHookable(function (array $set) {
            $this->set = array_values($set);
            foreach ($this->set as $value) {
                if (!$value instanceof {{ holds }}) {
                    throw new InvalidArgumentException('{{ name }} can only contain {{ holds }}');
                }
            }
            $this->checkUniqueIds();
        }, '__construct', $set);
    }

    private function checkUniqueIds(): void
    {
        if (!is_a($this, EntitySet::class)) {
            return;
        }
        $ids = array_map(function ({{ holds }} $item) {
            return $item->id()->toNative();
        }, $this->set);
        if (count($ids) !== count(array_unique($ids))) {
            throw new InvalidArgumentException('{{ name }} must have unique IDs');
        }
    }

    /**
     * @return bool
     */
    public function isNull(): bool
    {
        return count($this->set) === 0;
    }

    /**
     * @return bool
     */
    public function isNotNull(): bool
    {
        return !$this->isNull();
    }

    /**
     * @param array $native
     * @return static
     */
    public static function fromNative($native)
    {
        return new static(array_map(function ($value) {
            if ($value instanceof ValueObject) {
                return $value;
            }
            return {{ holds }}::fromNative($value);
        }, $native ?? []));
    }

    /**
     * @return static
     */
    public static function null()
    {
        return new static([]);
    }

    /**
     * @return array
     */
    public function toNative()
    {
        return array_map(function ({{ holds }} $value) {
            return $value->toNative();
        }, $this->set);
    }

    /**
     * @return {{ holds }}[]
     */
    public function toArray(): array
    {
        return $this->set;
    }

    /**
     * @param array $native
     * @return static
     */
    public function whenNull($native)
    {
        if ($this->isNull()) {
            return static::fromNative($native);
        }
        return clone $this;
    }

    public function add({{ holds }} $addition): {{ name }}
    {
        $clone = clone $this;
        $clone->set[] = $addition;
        return $clone;
    }

    public function addMany({{ name }} $set): {{ name }}
    {
        $clone = clone $this;
        $clone->set = array_merge($this->set, $set->toArray());
        return $clone;
    }

    {% for property, type in innerProperties %}
    public function getBy{{ property|ucfirst }}(\{{ type }} $value): {{ holds }}
    {
        return array_reduce($this->set, function ({{ holds }} $acc, {{ holds }} $item) use ($value) {
            if ($acc->isNull() && $item->{{ property }}()->isSame($value)) {
                return $item;
            }
            return $acc;
        }, {{ holds }}::null());
    }
    {% endfor %}

    {% for property, type in innerProperties %}
    public function getAllBy{{ property|ucfirst }}(\{{ type }} $value): {{ name }}
    {
        return $this->filter(function ({{ holds }} $item) use ($value) {
            return $item->{{ property }}()->isSame($value);
        });
    }
    {% endfor %}

    {% for property, type in innerProperties %}
    public function removeBy{{ property|ucfirst }}(\{{ type }} $removeValue): {{ name }}
    {
        return new {{ name }}(array_filter($this->set, function ({{ holds }} $value) use ($removeValue) {
            return $value->{{ property }}()->isNotSame($removeValue);
        }));
    }
    {% endfor %}

    public function isSame(ValueObject $compare): bool
    {
        return $this->toNative() == $compare->toNative();
    }

    public function isNotSame(ValueObject $compare): bool
    {
        return !$this->isSame($compare);
    }

    public function count()
    {
        return count($this->set);
    }

    public function atIndex(int $index): {{ holds }}
    {
        return $this->set[$index];
    }

    public function map(callable $mapper): {{ name }}
    {
        $items = [];
        foreach ($this->set as $key => $item) {
            $items[] = $mapper($item, $key);
        }
        return new static($items);
    }

    public function find(callable $finder): {{ name }}
    {
        foreach ($this->set as $item) {
            if ($finder($item)) {
                return $item;
            }
        }
        return {{ name }}::null();
    }

    public function indexOf({{ holds }} $compare): ?int
    {
        $match = null;
        foreach ($this->set as $key => $item) {
            if ($item->isSame($compare)) {
                $match = $key;
            }
        }
        return $match;
    }

    public function has({{ holds }} $compare): bool
    {
        return $this->indexOf($compare) !== null;
    }

    public function hasAll({{ name }} $compare): bool
    {
        $matches = 0;
        foreach ($compare->toArray() as $item) {
            if ($this->has($item)) {
                $matches++;
            }
        }
        return $matches === $compare->count();
    }

    public function hasAny({{ name }} $compare): bool
    {
        foreach ($compare->toArray() as $item) {
            if ($this->has($item)) {
                return true;
            }
        }
        return false;
    }

    public function doesntHave({{ holds }} $compare): bool
    {
        return !$this->has($compare);
    }

    public function doesntHaveAll({{ name }} $compare): bool
    {
        return !$this->hasAll($compare);
    }

    public function filter(callable $filter): {{ name }}
    {
        $items = [];
        foreach ($this->set as $key => $item) {
            if ($filter($item, $key)) {
                $items[] = $item;
            }
        }
        return new static($items);
    }

    public function remove({{ holds }} $toRemove): {{ name }}
    {
        $out = $this->toArray();
        foreach ($this->set as $key => $item) {
            if ($item->isSame($toRemove)) {
                unset($out[$key]);
                break;
            }
        }
        return new static($out);
    }

    public function removeMany({{ name }} $toRemove): {{ name }}
    {
        $out = clone $this;
        foreach ($toRemove->toArray() as $item) {
            $out = $out->remove($item);
        }
        return $out;
    }

    public function with({{ holds }} $value): {{ name }}
    {
        $existingIndex = $this->indexOf($value);
        if ($existingIndex === null) {
            return $this->add($value);
        }
        $clone = clone $this;
        $clone->set[$existingIndex] = $value;
        return $clone;
    }

    public function reduce(callable $reduce, $accumulator)
    {
        return array_reduce($this->set, $reduce, $accumulator);
    }

    public function reduceToStatic(callable $reduce): {{ name }}
    {
        return new static(array_reduce($this->set, $reduce, {{ name }}::null()));
    }

    public function random(): {{ holds }}
    {
        if ($this->isNull()) {
            return {{ holds }}::null();
        }
        return $this->atIndex(random_int(0, $this->count() - 1));
    }

    public function slice(int $offset, ?int $length): {{ name }}
    {
        return new {{ name }}(array_slice($this->toArray(), $offset, $length));
    }
}
