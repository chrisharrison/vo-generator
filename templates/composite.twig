use InvalidArgumentException;
use ChrisHarrison\VoGenerator\ValueObject;
use ChrisHarrison\VoGenerator\Entity;

class {{ name }} implements {{ implements|join(', ') }}
{
{% for trait in traits %}
    use \{{ trait }};
{%  endfor %}

    private $payload;

    {% for property in properties %}
    public function {{ property.propertyName }}(): {{ property.name }}
    {
        try {
        return {{ property.name }}::fromNative($this->payload['{{ property.propertyName }}'] ?? null);
        } catch (\Throwable $e) {
        var_dump($this); exit;
        }
    }
    {% endfor %}

    {% for property in properties %}
    /**
    * @param {{ property.name }} ${{ property.propertyName }}
    * @return static
    */
    public function with{{ property.propertyName|ucfirst }}({{ property.name }} ${{ property.propertyName }})
    {
        $clone = clone $this;
        $clone->payload['{{ property.propertyName }}'] = ${{ property.propertyName }}->toNative();
        return $clone;
    }
    {% endfor %}

    protected function __construct(array $payload)
    {
        $this->payload = array_map(function ($value) {
            if ($value instanceof ValueObject) {
                return $value->toNative();
            }
            return $value;
        }, $payload);

        $this->checkValidProperties();
        $this->checkRequiredProperties();
    }

    private function checkValidProperties(): void
    {
        foreach (static::properties() as $key => $type) {
            $type::fromNative($this->payload[$key] ?? null);
        }
    }

    private function checkRequiredProperties(): void
    {
        if ($this->isNull()) {
            return;
        }

        $missingRequiredProperties = [];
        foreach (static::requiredProperties() as $property) {
            if (($this->payload[$property] ?? null) === null) {
                $missingRequiredProperties[] = $property;
            }
        }

        if (count($missingRequiredProperties) > 0) {
            throw new InvalidArgumentException(sprintf(
                '{{ name }} cannot be initialised without: %s',
                implode(', ', $missingRequiredProperties)
            ));
        }
    }

    private static function requiredProperties(): array
    {
        return [
{% for property in properties %}
    {% if (property.required) %}
        '{{ property.propertyName }}',
    {% endif %}
{% endfor %}
        ];
    }

    public static function properties(): array
    {
        return [
{% for property in properties %}
             '{{ property.propertyName }}' => {{ property.name }}::class,
{% endfor %}
        ];
    }

    /**
     * @return bool
     */
    public function isNull(): bool
    {
        foreach ($this->payload as $value) {
            if ($value !== null) {
                return false;
            }
        }

        return true;
    }

    /**
     * @return bool
     */
    public function isNotNull(): bool
    {
        return !$this->isNull();
    }

    /**
     * @return array
     */
    public function toNative()
    {
        return $this->payload;
    }

    /**
     * @param ?array $native
     * @return static
     */
    public static function fromNative($native)
    {
        return new static($native);
    }

    public static function null()
    {
        return new static([]);
    }

    /**
     * @param ?array $native
     * @return static
     */
    public function whenNull($native)
    {
        if ($this->isNull()) {
            return static::fromNative($native);
        }
        return clone $this;
    }

    public function isSame(ValueObject $compare): bool
    {
        if (is_a($this, Entity::class)) {
            if (!is_a($compare, Entity::class)) {
                return false;
            }
            return $this->id()->isSame($compare->id());
        }
        return $this->toNative() == $compare->toNative();
    }

    public function isNotSame(ValueObject $compare): bool
    {
        return !$this->isSame($compare);
    }
}
