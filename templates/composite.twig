use InvalidArgumentException;
use ChrisHarrison\VoGenerator\Entity;
use ChrisHarrison\VoGenerator\ValueObject;
use ChrisHarrison\VoGenerator\HookComposition;

class {{ name }} implements {{ implements|implements }}
{
{% for trait in traits %}
    use \{{ trait }};
{%  endfor %}
    use HookComposition;

    private array $payload;

    {% for property in properties %}
    public function {{ property.propertyName }}(): {{ property.name }}
    {
        return {{ property.name }}::fromNative($this->payload['{{ property.propertyName }}'] ?? null);
    }
    {% endfor %}

    {% for property in properties %}
    /**
    * @param mixed ${{ property.propertyName }}
    * @return static
    */
    public function with{{ property.propertyName|ucfirst }}(mixed ${{ property.propertyName }}): static
    {
        $value = (${{ property.propertyName }} instanceof {{ property.name }}) ? ${{ property.propertyName }}->toNative() : ${{ property.propertyName }};

        $clone = clone $this;
        $clone->payload['{{ property.propertyName }}'] = $value;
        return $clone;
    }
    {% endfor %}

    protected function __construct(array $payload)
    {
        $this->composeHookable(function (array $payload) {
            $this->payload = array_map(function ($value) {
                if ($value instanceof ValueObject) {
                    return $value->toNative();
                }
                return $value;
            }, $payload);

            $this->checkValidProperties();
            $this->checkRequiredProperties();
        }, '__construct', $payload);
    }

    private function checkValidProperties(): void
    {
        foreach (static::properties() as $key => $type) {
            if (class_exists($type)) {
                $type::fromNative($this->payload[$key] ?? $type::null()->toNative());
            }
        }
    }

    private function checkRequiredProperties(): void
    {
        if ($this->isNull()) {
            return;
        }

        $missingRequiredProperties = [];
        foreach (static::requiredProperties() as $property) {
            if (($this->payload[$property] ?? null) === null) {
                $missingRequiredProperties[] = $property;
            }
        }

        if (count($missingRequiredProperties) > 0) {
            throw new InvalidArgumentException(sprintf(
                '{{ name }} cannot be initialised without: %s',
                implode(', ', $missingRequiredProperties)
            ));
        }
    }

    private static function requiredProperties(): array
    {
        return [
{% for property in properties %}
    {% if (property.required) %}
        '{{ property.propertyName }}',
    {% endif %}
{% endfor %}
        ];
    }

    public static function properties(): array
    {
        return [
{% for property in properties %}
             '{{ property.propertyName }}' => {{ property.name }}::class,
{% endfor %}
        ];
    }

    /**
     * @return bool
     */
    public function isNull(): bool
    {
        foreach ($this->payload as $value) {
            if ($value !== null) {
                return false;
            }
        }

        return true;
    }

    /**
     * @return bool
     */
    public function isNotNull(): bool
    {
        return !$this->isNull();
    }

    /**
     * @return array
     */
    public function toNative(): mixed
    {
        return array_reduce(array_keys(static::properties()), function (array $acc, string $property) {
            $propertyType = static::properties()[$property];
            $acc[$property] = $propertyType::fromNative($this->payload[$property] ?? null)->toNative();
            return $acc;
        }, []);
    }

    /**
     * @param ?array $native
     * @return static
     */
    public static function fromNative(mixed $native): static
    {
        return new static($native);
    }

    public static function null(): static
    {
        return new static([]);
    }

    /**
     * @param ?array $native
     * @return static
     */
    public function whenNull(mixed $native): static
    {
        if ($this->isNull()) {
            return static::fromNative($native);
        }
        return clone $this;
    }

    public function isSame(ValueObject $compare): bool
    {
        if (is_a($this, Entity::class)) {
            if (!is_a($compare, Entity::class)) {
                return false;
            }
            return $this->id()->isSame($compare->id());
        }
        return $this->toNative() == $compare->toNative();
    }

    public function isNotSame(ValueObject $compare): bool
    {
        return !$this->isSame($compare);
    }
}
