use ChrisHarrison\VoGenerator\ValueObject;
use InvalidArgumentException;
use ChrisHarrison\VoGenerator\HookComposition;

class {{ name }} implements ValueObject
{
{% for trait in traits %}
    use \{{ trait }};
{%  endfor %}
    use HookComposition;

    private $value;

    private static function possibleValues(): array
    {
        return [
{% for value in values %}
    '{{ value }}',
{% endfor %}
        ];
    }

    protected function __construct(?string $value)
    {
        $this->composeHookable(function (?string $value) {
            $this->value = $value ? strtoupper($value) : null;
            if ($this->value !== null && !in_array($this->value, static::possibleValues())) {
                throw new InvalidArgumentException(
                    sprintf('%s is not a valid enum value for: %s', $this->value, get_called_class())
                );
            }
        }, '__construct', $value);
    }

    /**
     * @return bool
     */
    public function isNull(): bool
    {
        return $this->value === null;
    }

    /**
     * @return bool
     */
    public function isNotNull(): bool
    {
        return !$this->isNull();
    }

    /**
     * @param ?string $native
     * @return static
     */
    public static function fromNative(mixed $native): static
    {
        return new static($native);
    }

    /**
     * @return string|null
     */
    public function toNative(): mixed
    {
        return $this->value;
    }

    /**
     * @return static
     */
    public static function null(): static
    {
        return new static(null);
    }

    /**
     * @param ?string $native
     * @return static
     */
    public function whenNull(mixed $native): static
    {
        if ($this->isNull()) {
            return static::fromNative($native);
        }
        return clone $this;
    }

    public function isSame(ValueObject $compare): bool
    {
        return $this->toNative() == $compare->toNative();
    }

    public function isNotSame(ValueObject $compare): bool
    {
        return !$this->isSame($compare);
    }

    public function toNumeric(): ?int
    {
        if ($this->isNull()) {
            return null;
        }
        return array_search($this->value, static::possibleValues());
    }

    public static function fromNumeric(int $numeric): {{ name }}
    {
        return new static(static::possibleValues()[$numeric]);
    }

    {% for value in values %}
        /**
        * @return static
        */
        public static function {{ value }}(): static
        {
        return new static('{{ value }}');
        }
    {% endfor %}
}