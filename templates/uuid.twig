use ChrisHarrison\VoGenerator\ValueObject;
use InvalidArgumentException;
use Ramsey\Uuid\Uuid;
use ChrisHarrison\VoGenerator\HookComposition;

class {{ name }} implements ValueObject
{
{% for trait in traits %}
    use \{{ trait }};
{%  endfor %}
    use HookComposition;

    private $value;

    protected function __construct(?string $value)
    {
        $this->composeHookable(function (?string $value) {
            $this->value = $value;
            if ($this->value !== null && !Uuid::isValid($this->value)) {
                throw new InvalidArgumentException(
                    sprintf('A {{ name }} can only be instantiated with a valid UUID. %s given', $this->value)
                );
            }
        }, '__construct', $value);
    }

    /**
    * @return static
    */
    public static function generate()
    {
        return new static(Uuid::uuid4()->toString());
    }

    /**
     * @return bool
     */
    public function isNull(): bool
    {
        return $this->value === null;
    }

    /**
     * @return bool
     */
    public function isNotNull(): bool
    {
        return !$this->isNull();
    }

    /**
     * @return static
     */
    public static function null()
    {
        return new self(null);
    }

    /**
     * @return string|null
     */
    public function toNative()
    {
        return $this->value;
    }

    /**
     * @param ?string $native
     * @return static
     */
    public static function fromNative($native)
    {
        return new static($native);
    }

    /**
     * @param ?string $native
     * @return static
     */
    public function whenNull($native)
    {
        if ($this->isNull()) {
            return static::fromNative($native);
        }
        return clone $this;
    }

    public function isSame(ValueObject $compare): bool
    {
        return $this->toNative() === $compare->toNative();
    }

    public function isNotSame(ValueObject $compare): bool
    {
        return !$this->isSame($compare);
    }
}
